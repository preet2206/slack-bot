# This is an autogenerated nbx_user.py file for a [NBX](www.nimblebox.ai) app:
# created time: Wednesday W37 [ UTC 14 Sep, 2022 - 11:15:35 ]
#   created by: preet

from ast import operator
import os

os.environ["NBOX_LOG_LEVEL"] = "INFO" # Keep it the way you like

from nbox import Operator
from nbox.hyperloop.job_pb2 import Resource
from nbox.jobs import Schedule
from nbox import logger # Use this logger for printing
from nbox import RelicsNBX

from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from slack_sdk.web.slack_response import SlackResponse
import json
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError

os.environ["SLACK_BOT_TOKEN"] = "xoxb-4003985010675-3997830071446-3iV4N8pICK2EaB4EimRMTrbb"
os.environ["SLACK_APP_TOKEN"] = "xapp-1-A040TSK52QG-4004334632979-c897a77acd304b307ae29217416c5f38b962141a19ea6cfd3a3aebd34e0eb2fa"

client = WebClient(token=os.environ.get("SLACK_BOT_TOKEN"))
app = App(token=os.environ.get("SLACK_BOT_TOKEN"))

class App(Operator):
  def __init__(self, conversation_id : str):
    super().___init__()

    # self.client = WebClient(token=os.environ.get("SLACK_BOT_TOKEN"))
    # self.app = App(token=os.environ.get("SLACK_BOT_TOKEN"))
    self.conversation_id = conversation_id

  def conversation_history():
    self.conversation_history = []
    try:   
      self.result = client.conversations_history(
          channel=conversation_id,
          inclusive=True,
          limit=100,
      )
      self.message = self.result["messages"][0]
    except SlackApiError as e:
        print(f"Error: {e}")
    
    self.results = self.result.data
    json.dumps(self.results)
    
    with open('./message_data.json', 'w') as f:
      json.dump(self.results, f)
    
    with open('./message_data.json','r') as file:
      self.data = json.load(file)
    
    self.urls = []
    for i in range(0,len(self.data['messages'])):
        try:
            fetch_url = str(self.data['messages'][i]['blocks'][0]['elements'][0]['elements'][0]['url'])
            self.urls.append(fetch_url)
        except KeyError:
            pass
    return self.urls

  @app.message("hello")
  def message_hello(self, message, say):
    # say() sends a message to the channel where the event was triggered
    say(f"Hey there <@{message['user']}>!")
  
  @app.message("get links")
  def get_links(self, message, say, urls):
    self.n = len(self.urls)
    say(f"There are {self.n} links in this channel <@{message['user']}>! \n {str(self.urls)}")
  
  def forward(self):
    urls = self.conversation_history()
    self.message_hello()
    self.get_links(urls)



def get_op(serving: bool = False) -> Operator:
  if serving:
    # initialise your Operator for NBX-Serving here
    operator = None

    # confused? uncomment lines below
    # from nbox.lib.demo import MagicServing
    # operator = MagicServing()
  else:
    # initialise your Operator for NBX-Job here
    operator = App("C0405V2SD1B")

    # confused? uncomment lines below
    # from nbox.lib.demo import Magic
    # operator = Magic()

  return operator

def get_resource() -> Resource:
  """Define your pod config here"""
  return Resource(
    cpu = "100m",         # 100mCPU
    memory = "200Mi",     # MiB
    disk_size = "1Gi",    # GiB
    gpu = "none",         # keep "none" for no GPU
    gpu_count = "0",      # keep "0" when no GPU
    timeout = 120_000,    # 2 minutes between attempts
    max_retries = 3,      # third times the charm :P
  )

def get_schedule() -> Schedule:
  # only relevant for NBX-Jobs
  # define your schedule here, if None will run only once.
  return None